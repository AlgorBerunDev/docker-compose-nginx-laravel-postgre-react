server {
    listen 80;
    index index.php index.html;
    server_name _;
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/html/public;

    
    # X-XSS-Protection
    # Заголовок X-XSS-Protection может предотвратить некоторые XSS-атаки («межсайтовый скриптинг»), он совместим с IE 8+, Chrome, Opera, Safari и Android.
    # Всего существует четыре варианта конфигурации:
    # 0                                         XSS-фильтр выключен
    # 1                                         XSS-фильтр включен, и, в случае обнаружения атаки, страница подвергается цензуре
    # 1;mode=block                              XSS-фильтр включен, и, в случае обнаружения атаки, предотвращает обработку страницы
    # 1;report=http://example.com/report_URI    XSS-фильтр включен, и, в случае обнаружения атаки, отправляется отчет о нарушении
    # Example: add_header X-XSS-Protection "1; mode=block";


    # HTTP Strict Transport Security
    # Заголовок HSTS (HTTP Strict Transport Security) гарантирует, что весь обмен данными 
    # из браузера осуществляется по протоколу HTTPS (HTTP Secure). Это предотвращает попытки 
    # обойти HTTPS и перенаправляет все HTTP запросы на HTTPS.
    # 
    # Перед тем, как добавлять этот заголовок, убедитесь в том, что все страницы сайта доступны
    # по HTTPS, иначе они не будут отображаться.
    # 
    # Заголовок HSTS совместим с последними версиями большинства браузеров (IE, Firefox, Opera, Safari и Chrome).
    # Всего есть три варианта конфигурации.
    # max-age               Интервал (в секундах) для указания браузеру, что запросы следует отправлять только через HTTPS.
    # includeSubDomains     Конфигурация распространяется на поддомены.
    # preload               Используйте, если хотите добавить домен в предопределенный список HSTS.
    # Example: add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';


    # X-Frame-Options
    # Заголовок X-Frame-Options позволяет снизить уязвимость вашего сайта для кликджекинг-атак. Этот заголовок служит инструкцией 
    # для браузера не загружать вашу страницу в frame/iframe. Не все браузеры поддерживают этот вариант, так что проверьте заголовок
    # на совместимость перед тем, как его добавлять.
    # 
    # Есть три варианта конфигурации.
    # SAMEORIGIN        Позволяет загрузку контента в frame/iframe только если фрейм и страница, его загружающая, расположены на одном домене.
    # DENY              Запрещает загрузку контента в frame/iframe.
    # ALLOW-FROM        Допускает загрузку контента в фреймах только для определенного URI.
    # Example: add_header X-Frame-Options “DENY”;


    # X-Content-Type-Options
    # Можно предотвратить атаки с использованием подмены MIME типов, добавив этот заголовок ответа HTTP.
    # Заголовок содержит инструкции по определению типа файла и не допускает сниффинг контента.
    # При конфигурации потребуется добавить только один параметр: “nosniff”.
    # Example: add_header X-Content-Type-Options nosniff;

    # add_header X-Frame-Options "ALLOW-FROM localhost:3000";
    # add_header Content-Security-Policy "frame-ancestors localhost:3000";
    # add_header X-XSS-Protection "1; mode=block";
    # add_header X-Content-Type-Options "nosniff";

    location ~ ^/uploads/ {
        root /var/www/html/storage/app/public;
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        try_files $uri =404;
    }

    location ~ ^/(api) {
        root /var/www/html/public;
        try_files $uri $uri/ /index.php?$query_string;
    }
    
    location ~\.(js|css|png|jpg|ico|svg|txt|jpeg)$ {
		root /var/www/html/frontend/build;
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        }
        try_files $uri =404;
	}

    location / {
        root /var/www/html/frontend/build;
        try_files $uri /index.html;
    }
    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php_exact:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_NAME $fastcgi_path_info;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}